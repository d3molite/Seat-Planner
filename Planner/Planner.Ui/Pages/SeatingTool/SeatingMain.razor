@page "/Planner"
@using Planner.Data.Models
@using Planner.Data.Interfaces
@using Planner.Ui.Helpers
@using Planner.Ui.Pages.SeatingTool.Components
@using Planner.Ui.Pages.SeatingTool.Dialog
@using System.Text

@inject ISeatingConfigurationService SeatingConfigurationService
@inject ISnackbar Snackbar
@inject IDialogService DialogService

<MudDropContainer
    Class="flex-grow-1 h-100"
    T="Attendee"
    Items="Attendees"
    ItemsSelector="@((item, dropzone) => item.SeatIdentifier == dropzone)"
    ItemDropped="_dropZoneHelper.ItemUpdated"
    CanDrop="(attendee, s) => _dropZoneHelper.CanDrop(attendee, s)"
    NoDropClass="mud-border-error"
    CanDropClass="mud-border-success">
    <ChildContent>
        <MudStack Row="true" Class="h-100">
            <RowsViewerComponent SeatingConfigurationService="@SeatingConfigurationService"/>
            <PlannerEditorComponent SeatingConfigurationService="@SeatingConfigurationService"/>
        </MudStack>
    </ChildContent>
    <ItemRenderer>
        <MudStack AlignItems="AlignItems.Center" Class="h-100 w-100 overflow-hidden pt-2 pb-2" Style="@GetGroupingStyle(context)" Spacing="1" @ondblclick="@(() => EditAttendee(context))">
            <MudText Typo="Typo.body2" Class="m-0 h-25 p-0">@context.NickName</MudText>
            <MudText Typo="Typo.body2" Class="m-0 h-25 p-0">@context.FirstName</MudText>
            <MudStack Class="w-100 pl-4 pr-4" Row="true" Justify="SelectJustify(context)">
                @if (!context.IsLegend)
                {
                    <MudText Typo="Typo.body2" Class="m-0 h-25 p-0">@context.LeftSeat</MudText>
                    @if (context.NumberOfSeats > 1)
                    {
                        <MudText Typo="Typo.body2" Class="m-0 h-25 p-0">@context.RightSeat</MudText>
                    }
                }
                else{
                    <MudText Typo="Typo.body2" Class="m-0 h-25 p-0 fw-bold">LEGEND</MudText>
                }
            </MudStack>
        </MudStack>
    </ItemRenderer>
</MudDropContainer>

@code {

    private DropZoneHelper _dropZoneHelper = null!;

    protected override async Task OnInitializedAsync()
    {
        SeatingConfigurationService.SeatingDataUpdated += async (_, _) => await InvokeAsync(StateHasChanged);
        _dropZoneHelper = new DropZoneHelper(SeatingConfigurationService);

        await base.OnInitializedAsync();
    }

    private Justify SelectJustify(Attendee attendee)
    {
        return attendee.NumberOfSeats == 1 ? Justify.Center : Justify.SpaceAround;
    }

    private List<Attendee> Attendees => SeatingConfigurationService.Attendees;

    private async Task EditAttendee(Attendee attendee)
    {
        var dialogAttendee = attendee.Clone();

        var parameters = new DialogParameters<AttendeeEditDialog>
        {
            {
                x => x.Attendee, dialogAttendee
            }
        };

        var dialog = await DialogService.ShowAsync<AttendeeEditDialog>("Teilnehmer bearbeiten", parameters);
        var result = await dialog.Result;

        if (result.Canceled) return;

        attendee.UpdateSelf((Attendee) result.Data);
        SeatingConfigurationService.UpdatedExternal();
    }

    private string GetGroupingStyle(Attendee? context)
    {
        var contextMemberGroup = context.MemberGroup;
        
        var sb = new StringBuilder();

        sb.Append("border-radius: 0 0 8px 8px;");
        
        switch (contextMemberGroup)
        {
            case "A":
                sb.Append(GetBackground("#880000"));
                break;
            case "B":
                sb.Append(GetBackground("#884400"));
                break;
            case "C":
                sb.Append(GetBackground("#448800"));
                break;
            case "D":
                sb.Append(GetBackground("#008800"));
                break;
            case "E":
                sb.Append(GetBackground("#008844"));
                break;
            case "F":
                sb.Append(GetBackground("#004488"));
                break;
            case "G":
                sb.Append(GetBackground("#000088"));
                break;
            case "H":
                sb.Append(GetBackground("#448844"));
                break;
            case "I":
                sb.Append(GetBackground("#884488"));
                break;
            case "J":
                sb.Append(GetBackground("#22DD22"));
                break;
            case "K":
                sb.Append(GetBackground("#DD2222"));
                break;
            case "L":
                sb.Append(GetBackground("#2222DD"));
                break;
        }

        if (context.IsLegend)
            sb.Append($"background-image: url({"/img/legend.png"});");

        return sb.ToString();
    }
    
    private static string GetBackground(string color) => $"background: {color}22;";

}