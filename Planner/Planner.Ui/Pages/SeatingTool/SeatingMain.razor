@page "/Planner"
@using Planner.Data.Models
@using Planner.Data.Interfaces
@using Planner.Ui.Helpers
@using Planner.Ui.Pages.SeatingTool.Components
@using Planner.Ui.Pages.SeatingTool.Dialog

@inject ISeatingConfigurationService SeatingConfigurationService
@inject ISnackbar Snackbar
@inject IDialogService DialogService

<MudDropContainer
    Class="flex-grow-1 h-100"
    T="Attendee"
    Items="Attendees"
    ItemsSelector="@((item, dropzone) => item.SeatIdentifier == dropzone)"
    ItemDropped="_dropZoneHelper.ItemUpdated"
    CanDrop="(attendee, s) => _dropZoneHelper.CanDrop(attendee, s)"
    NoDropClass="mud-border-error"
    CanDropClass="mud-border-success">
    <ChildContent>
        <MudStack Row="true" Class="h-100">
            <RowsViewerComponent SeatingConfigurationService="@SeatingConfigurationService"/>
            <PlannerEditorComponent SeatingConfigurationService="@SeatingConfigurationService"/>
        </MudStack>
    </ChildContent>
    <ItemRenderer>
        <MudStack AlignItems="AlignItems.Center" Class="h-100 w-100 overflow-hidden pt-2" Spacing="1" @ondblclick="@(() => EditAttendee(context))">
            <MudText Typo="Typo.body2" Class="m-0 h-25 p-0">@context.NickName</MudText>
            <MudText Typo="Typo.body2" Class="m-0 h-25 p-0">@context.FirstName</MudText>
            <MudStack Class="w-100 pl-4 pr-4" Row="true" Justify="SelectJustify(context)">
                <MudText Typo="Typo.body2" Class="m-0 h-25 p-0">@context.LeftSeat</MudText>
                @if (@context.NumberOfSeats > 1)
                {
                    <MudText Typo="Typo.body2" Class="m-0 h-25 p-0">@context.RightSeat</MudText>
                }
            </MudStack>
        </MudStack>
    </ItemRenderer>
</MudDropContainer>

@code {

    private DropZoneHelper _dropZoneHelper = null!;
    
    protected override async Task OnInitializedAsync()
    {
        SeatingConfigurationService.SeatingDataUpdated += async(_, _) => await InvokeAsync(StateHasChanged);
        _dropZoneHelper = new DropZoneHelper(SeatingConfigurationService);
        
        await base.OnInitializedAsync();
    }

    private Justify SelectJustify(Attendee attendee)
    {
        return attendee.NumberOfSeats == 1 ? Justify.Center : Justify.SpaceAround;
    }
    
    private List<Attendee> Attendees => SeatingConfigurationService.Attendees;
    
    
    private async Task EditAttendee(Attendee attendee)
    {
        var dialogAttendee = attendee.Clone();
        
        var parameters = new DialogParameters<AttendeeEditDialog>
        {
            {
                x => x.Attendee, dialogAttendee
            }
        };

        var dialog = await DialogService.ShowAsync<AttendeeEditDialog>("Teilnehmer bearbeiten", parameters);
        var result = await dialog.Result;

        if (result.Canceled) return;
        
        attendee.UpdateSelf((Attendee)result.Data);
        SeatingConfigurationService.UpdatedExternal();
    }
}