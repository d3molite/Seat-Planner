@page "/seating"
@using Planner.Db.Models
@using Planner.WebUI.Pages.Seating.Components
@using Planner.Db.Interfaces
@using Planner.Db.Utils
@inject IAttendeeRepository AttendeeRepository

<MudDropContainer 
    Class="flex-grow-1" 
    T="Attendee" 
    Items="Attendees"
    ItemsSelector="@((item, dropzone) => item.SeatIdentifier == dropzone)" 
    ItemDropped="ItemUpdated"
    CanDrop="(attendee, s) => CanDrop(attendee, s)"
    NoDropClass="mud-border-error"
    CanDropClass="mud-border-success">
    <ChildContent>
        <MudStack Row="true" Class="h-100">
            
            <MudLayout Class="d-flex flex-column h-100 w-100 align-content-center" Style="overflow-y: scroll;">
                
                @* Add an entire Seating Row Here *@
                @foreach (var row in Rows)
                {
                    <MudStack Class="w-100 flex-wrap" Style="height: 250px; margin: 5rem 0;" Row="true" Spacing="3" Reverse="true" Justify="Justify.Center">
                        @for (var i = 1; i <= row.Seats.Count() - 1; i += 2)
                        {
                            var secondSeat = row.Seats[i - 1];
                            var firstSeat = row.Seats[i];

                            @* One Table *@
                            <SeatingTable FirstSeat="@firstSeat" SecondSeat="@secondSeat" Row="@row" Attendees="@Attendees"/>
                        }
                    </MudStack>
                }
            </MudLayout>
            <MudPaper Elevation="1" Style="width: 15%">
                <MudStack Justify="Justify.SpaceBetween" Class="h-100">
                    <MudStack Spacing="3" Class="m-2">
                        <MudDropZone T="Attendee" Identifier="" Class="h-100 rounded-lg border-1 border-dashed mud-border-lines-default">
                            <MudText Typo="Typo.h6" Class="mb-4">People List</MudText>
                        </MudDropZone>
                    </MudStack>
                    <MudButton Color="Color.Success" Class="m-2" Variant="Variant.Filled" @onclick="Save">Save</MudButton>
                </MudStack>
            </MudPaper>
        </MudStack>
    </ChildContent>
    <ItemRenderer>
        <MudStack AlignItems="AlignItems.Center" Class="h-100 w-100 overflow-hidden pt-2" Spacing="1">
            <MudText Typo="Typo.body2" Class="m-0 h-25 p-0">@GetNickName(context.NickName)</MudText>
            <MudText Typo="Typo.body2" Class="m-0 h-25 p-0">@context.FirstName</MudText>
            <MudText Typo="Typo.body2" Class="m-0 h-25 p-0">(@context.NumberOfSeats)</MudText>
        </MudStack>
    </ItemRenderer>
</MudDropContainer>


@code {

    private static string GetNickName(string input)
    {
        return input.Length > 12 ? input[..12] : input;
    }
    
    protected override void OnInitialized()
    {
        Attendees = AttendeeRepository.GetAll().ToList();

        foreach (var attendee in Attendees)
        {
            if (!Rows.Any(x => x.Seats.Any(c => c.SeatIdentifier == attendee.SeatIdentifier))) attendee.SeatIdentifier = "";
        }
        
        InvokeAsync(StateHasChanged);
    }

    private void Save()
    {
        foreach (var attendee in Attendees)
        {
            AttendeeRepository.Crud(attendee);
        }
    }

    private List<SeatingRow> Rows { get; set; } = new List<SeatingRow>()
    {
        new SeatingRow("J"),
        new SeatingRow("K"),
        new ("L"),
        new ("M"),
        new ("N"),
    };

    private List<Attendee> Attendees { get; set; }

    private void ItemUpdated(MudItemDropInfo<Attendee> dropItem)
    {
        dropItem.Item.SeatIdentifier = dropItem.DropzoneIdentifier;
        dropItem.Item.Operation = Operation.Updated;
        InvokeAsync(StateHasChanged);
    }

    private bool CanDrop(Attendee item, string dropName)
    {
        if (dropName == "") return true;
        if (SeatsInZone(dropName)) return false;
        switch (item.NumberOfSeats)
        {
            case > 1 when !IsEvenSeat(dropName):
            case > 1 when SeatsInNextZone(dropName):
                return false;
            default:
                return true;
        }
    }

    private bool SeatsInZone(string zone)
    {
        return Attendees.Any(x => x.SeatIdentifier == zone);
    }

    private bool SeatsInNextZone(string zone)
    {
        var items = zone.Split("-");
        var nextZone = $"{items[0]}-{int.Parse(items[1]) + 1}";
        return Attendees.Any(x => x.SeatIdentifier == nextZone);
    }

    private static bool IsEvenSeat(string zone)
    {
        return int.Parse(zone.Split("-")[1]) % 2 == 0;
    }

}